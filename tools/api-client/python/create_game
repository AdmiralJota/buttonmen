#!/usr/bin/python
##### create_game
# Example script which creates games, and also prints information
# about available buttons

import sys
sys.path.append('lib')

import bmapi
import optparse
import random
import re
import time

die_recipe_re = re.compile('^([^(]*)\(([^)]+)\)(.*)$')

# implicitly parses sys.argv
def parse_args():
  parser = optparse.OptionParser()
  parser.add_option(
    "-c", "--config",
    help="config file containing site parameters",
    type=str, default=".bmrc"
  )
  parser.add_option(
    "-s", "--site",
    help="buttonmen site to access",
    type=str, default="www"
  )
  parser.add_option(
    "-o", "--opponent",
    help="opponent to fight",
    type=str
  )
  parser.add_option(
    "-p", "--play-all",
    action="store_true", default=False,
    help="create a game against each opponent you aren't currently playing"
  )
  parser.add_option(
    "-l", "--list-buttons",
    action="store_true", default=False,
    help="list buttons with all of the specified skills"
  )
  return parser.parse_args()

def random_array_element(array):
  index = int(random.random() * len(array))
  return array[index]

def get_button_data(b):
  retval = b.load_button_names()
  if not retval['status'] == 'ok':
    raise ValueError, "Failed to get button data, got: %s" % retval
  data = retval['data']
  buttons = {}
  for i in range(len(data['buttonNameArray'])):
    buttondice = data['recipeArray'][i].split()
    skills = set()
    for die in buttondice:
      mobj = die_recipe_re.match(die)
      if mobj:
        dieskills = list(str(mobj.group(1) + mobj.group(3)))
        skills.update(dieskills)
    buttons[data['buttonNameArray'][i]] = {
      'recipe': data['recipeArray'][i],
      'unimplemented': data['hasUnimplementedSkillArray'][i],
      'skills': skills,
    }
  return buttons

def get_opponent_data(b):
  retval = b.load_player_names()
  if not retval['status'] == 'ok':
    raise ValueError, "Failed to get player data, got: " + retval
  data = retval['data']
  players = []
  for i in range(len(data['nameArray'])):
    if data['nameArray'][i] == b.username: continue
    if data['statusArray'][i] == 'active':
      players.append(data['nameArray'][i])
  return players

def get_game_data(b, status):
  if status == 'completed':
    retval = b.load_completed_games()
  else:
    retval = b.load_active_games()
  if not retval['status'] == 'ok':
    raise ValueError, "Failed to get game data, got: " + retval
  data = retval['data']
  games = []
  for i in range(len(data['gameIdArray'])):
    gamedata = {}
    for item in [
      'gameId', 'nWins', 'nLosses', 'nTargetWins', 'gameState',
      'opponentId', 'opponentName', 'isAwaitingAction', 'myButtonName',
      'nDraws', 'status', 'opponentButtonName', 'gameId']:
      gamedata[item] = data[item + 'Array'][i]
    games.append(gamedata)
  return games

def get_buttons_with_skills(buttons, skills):
  skillbuttons = []
  for button in sorted(buttons.keys()):
    info = buttons[button]
    if info['unimplemented']: continue
    hasskills = True
    for skill in skills:
      if not skill in info['skills']:
        hasskills = False
    if hasskills:
      skillbuttons.append(button)
  return skillbuttons

def random_implemented_button(buttons):
  return random_array_element(
    [button for button in buttons.keys() \
     if not buttons[button]['unimplemented']])

def create_games(b, buttons, opponents):
  for opponent in opponents:
    pbutton = random_array_element(buttons)
    obutton = random_array_element(buttons)
    print "%s (%s) vs. %s (%s)" % (b.username, pbutton, opponent, obutton)
    time.sleep(3)
    print b.create_game(opponent, pbutton, obutton)

def create_random_game(opponent, b, players=False):
  if not players:
    players = get_opponent_data(b)
  if not opponent in players:
    raise ValueError, "Opponent %s is not known on site"
  buttons = get_button_data(b)
  while True:
    pbutton = random_implemented_button(buttons)
    obutton = random_implemented_button(buttons)
    print "%s (%s: %s) vs.\n%s (%s: %s)" % (
      b.username, pbutton, buttons[pbutton]['recipe'],
      opponent, obutton, buttons[obutton]['recipe'])
    print "  Create this game (y/n)?",
    confirm = raw_input()
    if confirm.lower() in ['y', 'yes']:
      print b.create_game(opponent, pbutton, obutton)
      return True

def play_all_opponents(opts, b):
  players = get_opponent_data(b)
  current_opponents = {}
  for game in get_game_data(b, 'active'):
    current_opponents[game['opponentName']] = True
  for player in players:
    if not player in current_opponents:
      print "No game against %s - start one?" % (player),
      confirm = raw_input()
      if confirm.lower() in ['y', 'yes']:
        create_random_game(player, b, players=players)

########################################################################
[opts, args] = parse_args()

b = bmapi.BMClient(opts.config, opts.site)
if not b.verify_login():
  print "Could not login"
  sys.exit(1)
if opts.opponent:
  create_random_game(opts.opponent, b)

elif opts.play_all:
  play_all_opponents(opts, b)

elif opts.list_buttons:
  buttons = get_button_data(b)
  skillbuttons = get_buttons_with_skills(buttons, args)
  print "Buttons found:"
  for button in skillbuttons:
    print "  %s: %s" % (button, buttons[button]['recipe'])
