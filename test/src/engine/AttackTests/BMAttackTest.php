<?php

require_once "engine/BMAttack.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-21 at 15:10:47.
 */
class BMAttackTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BMAttack
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = BMAttack::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMAttack::getInstance
     * @todo   Implement testGetInstance().
     */
    public function testGetInstance()
    {
        $test1 = BMAttack::getInstance();
        $test2 = BMAttack::getInstance();

        $this->assertTrue($test1 === $test2);
    }

    /**
     * @covers BMAttack::add_die
     * @todo   Implement testAdd_die().
     */
    public function testAdd_die()
    {
        $die1 = new BMDie;
        $die2 = new BMDie;
        $die3 = new BMDie;


        $this->object->add_die($die1);

        $dlist = PHPUnit_Framework_Assert::readAttribute($this->object, "validDice");

        $this->assertNotEmpty($dlist);
        $this->assertEquals(1, count($dlist));
        $this->assertContains($die1, $dlist);

        // duplication?
        $this->object->add_die($die1);

        $dlist = PHPUnit_Framework_Assert::readAttribute($this->object, "validDice");

        $this->assertNotEmpty($dlist);
        $this->assertEquals(1, count($dlist));
        $this->assertContains($die1, $dlist);

        // multiple dice
        $this->object->add_die($die2);
        $this->object->add_die($die3);
        $dlist = PHPUnit_Framework_Assert::readAttribute($this->object, "validDice");

        $this->assertNotEmpty($dlist);
        $this->assertEquals(3, count($dlist));
        $this->assertContains($die1, $dlist);
        $this->assertContains($die2, $dlist);
        $this->assertContains($die3, $dlist);
        
        // duplication in bigger list
        $this->object->add_die($die3);

        $dlist = PHPUnit_Framework_Assert::readAttribute($this->object, "validDice");

        $this->assertNotEmpty($dlist);
        $this->assertEquals(3, count($dlist));
        $this->assertContains($die1, $dlist);
        $this->assertContains($die2, $dlist);
        $this->assertContains($die3, $dlist);


    }

    /**
     * @covers BMAttack::help_bounds
     * @todo   Implement testHelp_bounds().
     */
    public function testHelp_bounds()
    {
        $nohelp = array(0);
        $smallhelp = array(1, 2, 3);
        $bighelp = array(1, 2, 3, 4, 5, 6);
        $neghelp = array(-4, -3, -2, -1);
        $widehelp = array(-2, -1, 0, 1, 2);

        // no help
        $helpvals = array();

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(0, $bounds[0]);
        $this->assertEquals(0, $bounds[1]);

        // help, but not helpful
        $helpvals = array($nohelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(0, $bounds[0]);
        $this->assertEquals(0, $bounds[1]);

        // lots of lack of help
        $helpvals = array($nohelp, $nohelp, $nohelp, $nohelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(0, $bounds[0]);
        $this->assertEquals(0, $bounds[1]);

        // various one-die scenarios
        $helpvals = array($smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(3, $bounds[1]);
        
        $helpvals = array($bighelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);


        $helpvals = array($neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(-1, $bounds[1]);


        $helpvals = array($widehelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-2, $bounds[0]);
        $this->assertEquals(2, $bounds[1]);

        // combinations

        $helpvals = array($smallhelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        $helpvals = array($smallhelp, $bighelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(9, $bounds[1]);

        // mix in some non-help (which shouldn't happen)

        $helpvals = array($nohelp, $smallhelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        $helpvals = array($smallhelp, $nohelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        $helpvals = array($smallhelp, $smallhelp, $nohelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(1, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        // negatives

        $helpvals = array($neghelp, $neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-8, $bounds[0]);
        $this->assertEquals(-1, $bounds[1]);

        $helpvals = array($neghelp, $nohelp, $neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-8, $bounds[0]);
        $this->assertEquals(-1, $bounds[1]);

        $helpvals = array($nohelp, $neghelp, $neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-8, $bounds[0]);
        $this->assertEquals(-1, $bounds[1]);

        $helpvals = array($neghelp, $neghelp, $nohelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-8, $bounds[0]);
        $this->assertEquals(-1, $bounds[1]);



        // mix pos and heg
        $helpvals = array($smallhelp, $neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(3, $bounds[1]);

        $helpvals = array($neghelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(3, $bounds[1]);

        $helpvals = array($smallhelp, $neghelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        $helpvals = array($neghelp, $smallhelp, $smallhelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);

        $helpvals = array($smallhelp, $smallhelp, $neghelp);

        $bounds = $this->object->help_bounds($helpvals);

        $this->assertEquals(2, count($bounds));
        $this->assertEquals(-4, $bounds[0]);
        $this->assertEquals(6, $bounds[1]);



    }

    /**
     * @covers BMAttack::collect_contributions
     * @todo   Implement testCollect_contributions().
     */
    public function testCollect_contributions()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMAttack::find_attack
     * @todo   Implement testFind_attack().
     */
    public function testFind_attack()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMAttack::validate_attack
     * @todo   Implement testValidate_attack().
     */
    public function testValidate_attack()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMAttack::commit_attack
     * @todo   Implement testCommit_attack().
     */
    public function testCommit_attack()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}


