<?php

require_once "engine/BMGame.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-11 at 13:27:50.
 */
class BMGameTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BMGame
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BMGame;
        // Currently, I am only ensuring that there are two players.
        // Note that eventually, the array elements will be replaced by BMPlayer
        // objects or player IDs.
        $this->object->playerArray = array('Harry', 'Sally');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateEndOfTurn() {
        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;

        // both players still have dice and both have not passed
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);

        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(TRUE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);

        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, TRUE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);

        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(TRUE, TRUE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);

        // the first player has no dice
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array());
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);

        // the second player has no dice
        $this->object->activeDieArrayArray = array(array(),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateEndOfRound() {
        $this->object->maxWins = 3;
        $this->object->gameScoreArray = array(array(1,2,1),
                                              array(2,1,1));
        $this->object->gameState = BMGameState::endRound;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::loadDice, $this->object->gameState);

        $this->object->maxWins = 5;
        $this->object->gameScoreArray = array(array(5,2,1),
                                              array(2,5,1));
        $this->object->gameState = BMGameState::endRound;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endGame, $this->object->gameState);
    }

    /**
     * @covers BMGame::__get
     * @todo   Implement test__get().
     */
    public function test__get() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set() {
        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->dieArrayArray = array(array($BMDie1), array($BMDie2));
        $this->assertEquals($BMDie1, $this->object->dieArrayArray[0][0]);
        $this->assertEquals($BMDie2, $this->object->dieArrayArray[1][0]);

        $this->object->gameScoreArray = array(array(2,1,1), array(1,2,1));

        try {
            $this->object->gameScoreArray = array(array(2,1,1), array(1,2));
            $this->fail('W/L/D must be three numbers.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

}
