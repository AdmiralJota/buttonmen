<?php

require_once "engine/BMGame.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-11 at 13:27:50.
 */
class BMGameTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BMGame
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BMGame;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateStartGame() {
        $this->object->gameState = BMGameState::startGame;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startGame, $this->object->gameState);

        // missing the playerArray
        $this->object->gameState = BMGameState::startGame;
        // james: this needs to be updated to contain BMPlayers or player ids
        if (isset($this->object->playerArray)) {
            unset($this->object->playerArray);
        }
        $Button1 = new BMButton;
        $Button2 = new BMButton;
        $this->object->buttonArray = array($Button1, $Button2);
        $this->object->maxWins = 3;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startGame, $this->object->gameState);

        $this->object->gameState = BMGameState::startGame;
        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        $Button1 = new BMButton;
        $Button2 = new BMButton;
        $this->object->buttonArray = array($Button1, $Button2);
        $this->object->maxWins = 3;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::applyHandicaps, $this->object->gameState);
        $this->assertEquals(array(FALSE, FALSE), $this->object->passStatusArray);
        $this->assertEquals(array(array(0, 0, 0), array(0, 0, 0)),
                            $this->object->gameScoreArray);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateApplyHandicaps() {
        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        $this->object->gameState = BMGameState::applyHandicaps;
        $this->object->maxWins = 3;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::applyHandicaps,
                            $this->object->gameState);

        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        $this->object->gameState = BMGameState::applyHandicaps;
        $this->object->gameScoreArray = array(array(0, 0, 0),array(0, 0, 0));
        $this->object->maxWins = 3;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::chooseAuxiliaryDice,
                            $this->object->gameState);

        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        $this->object->gameState = BMGameState::applyHandicaps;
        $this->object->gameScoreArray = array(array(3, 0, 0),array(0, 3, 0));
        $this->object->maxWins = 3;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endGame, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateDetermineInitiative() {
        $this->object->gameState = BMGameState::determineInitiative;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::determineInitiative, $this->object->gameState);

        $this->object->gameState = BMGameState::determineInitiative;
        // james: the player below will probably be replaced by a BMPlayer
        // or a player ID
        $this->object->playerWithInitiative = 'Harry';
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startRound, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateEndTurn() {
        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;

        // both players still have dice and both have not passed

        // james: the playerArray will be replaced by BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        // james: the activePlayer will be replaced by a BMPlayer or player id
        $this->object->activePlayer = 'Harry';
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);
        $this->assertTrue(isset($this->object->activePlayer));
        $this->assertEquals('Sally', $this->object->activePlayer);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(FALSE, FALSE), $this->object->passStatusArray);

        // james: the playerArray will be replaced by BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        // james: the activePlayer will be replaced by a BMPlayer or player id
        $this->object->activePlayer = 'Sally';
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(TRUE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);
        $this->assertTrue(isset($this->object->activePlayer));
        $this->assertEquals('Harry', $this->object->activePlayer);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(TRUE, FALSE), $this->object->passStatusArray);

        // james: the playerArray will be replaced by BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        // james: the activePlayer will be replaced by a BMPlayer or player id
        $this->object->activePlayer = 'Harry';
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, TRUE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::startTurn, $this->object->gameState);
        $this->assertTrue(isset($this->object->activePlayer));
        $this->assertEquals('Sally', $this->object->activePlayer);
        $this->assertTrue(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(FALSE, TRUE), $this->object->passStatusArray);

        // both players have passed
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(TRUE, TRUE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);

        // the first player has no dice
        $this->object->activeDieArrayArray = array(array($BMDie1),
                                                   array());
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);

        // the second player has no dice
        $this->object->activeDieArrayArray = array(array(),
                                                   array($BMDie2));
        $this->object->passStatusArray = array(FALSE, FALSE);
        $this->object->gameState = BMGameState::endTurn;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endRound, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateEndRound() {
        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        // james: the activePlayer will be replaced by a BMPlayer or player id
        $this->object->activePlayer = 'Harry';
        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->activeDieArrayArray = array(array($BMDie1), array($BMDie2));
        $this->object->passStatusArray = array(TRUE, TRUE);
        $this->object->maxWins = 3;
        $this->object->gameScoreArray = array(array(1,2,1),
                                              array(2,1,1));
        $this->object->gameState = BMGameState::endRound;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::loadDice, $this->object->gameState);
        $this->assertFalse(isset($this->object->activePlayer));
        $this->assertFalse(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(FALSE, FALSE), $this->object->passStatusArray);

        $this->object->maxWins = 5;
        $this->object->gameScoreArray = array(array(5,2,1),
                                              array(2,5,1));
        $this->object->gameState = BMGameState::endRound;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endGame, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateEndGame() {
        $this->object->gameState = BMGameState::endGame;
        $this->object->updateGameState();
        $this->assertEquals(BMGameState::endGame, $this->object->gameState);
    }

    /**
     * @covers BMGame::updateGameState
     */
    public function testUpdateGameStateWhenStateIsNotSet() {
        try {
            $this->object->updateGameState();
            $this->fail('An undefined game state cannot be updated.');
        }
        catch (LogicException $expected) {
        }
    }

    /**
     * @covers BMGame::resetPlayState
     */
    public function testResetGameState() {
        $method = new ReflectionMethod('BMGame', 'resetPlayState');
        $method->setAccessible(TRUE);

        $this->object->playerArray = array('Harry', 'Sally');
        $this->object->activePlayer = 'Sally';
        $this->object->playerWithInitiative = 'Harry';

        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $BMDie3 = new BMDie;
        $BMDie4 = new BMDie;

        $this->object->activeDieArrayArray = array(array($BMDie1), array($BMDie2));
        $this->object->passStatusArray = array(TRUE, TRUE);
        $this->object->capturedDieArrayArray = array(array($BMDie3), array($BMDie4));
        $this->object->roundScoreArray = array(40, -25);

        $method->invoke($this->object);
        $this->assertFalse(isset($this->object->activePlayer));
        $this->assertFalse(isset($this->object->playerWithInitiative));
        $this->assertFalse(isset($this->object->activeDieArrayArray));
        $this->assertEquals(array(FALSE, FALSE), $this->object->passStatusArray);
        $this->assertEquals(array(array(), array()), $this->object->capturedDieArrayArray);
        $this->assertFalse(isset($this->object->roundScoreArray));
    }

    /**
     * @covers BMGame::__get
     */
    public function test__get() {
        // check that a nonexistent property can be gotten gracefully
        $this->assertEquals(NULL, $this->object->nonsenseVariable);

        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->buttonArray = array($BMDie1, $BMDie2);
        $this->assertEquals(array($BMDie1, $BMDie2), $this->object->buttonArray);
    }

    /**
     * @covers BMGame::__set
     */
    public function test__set() {
        // james: this needs to be updated to contain BMPlayers or player ids
        $this->object->playerArray = array('Harry', 'Sally');
        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->dieArrayArray = array(array($BMDie1), array($BMDie2));
        $this->assertEquals($BMDie1, $this->object->dieArrayArray[0][0]);
        $this->assertEquals($BMDie2, $this->object->dieArrayArray[1][0]);

        $this->object->gameScoreArray = array(array(2,1,1), array(1,2,1));

        try {
            $this->object->gameScoreArray = array(array(2,1,1), array(1,2));
            $this->fail('W/L/D must be three numbers.');
        }
        catch (InvalidArgumentException $expected) {
        }

        try {
            $this->object->gameScoreArray = array(array(2,1,1));
            $this->fail('There must be the same number of players and game scores.');
        }
        catch (InvalidArgumentException $expected) {
        }
    }

    /**
     * @covers BMGame::__isset
     */
    public function test__isset() {
        $this->assertFalse(isset($this->object->buttonArray));

        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->buttonArray = array($BMDie1, $BMDie2);
        $this->assertTrue(isset($this->object->buttonArray));
    }

    /**
     * @covers BMGame::__unset
     */
    public function test__unset() {
        // check that a nonexistent property can be unset gracefully
        unset($this->object->buttonArray);

        $BMDie1 = new BMDie;
        $BMDie2 = new BMDie;
        $this->object->buttonArray = array($BMDie1, $BMDie2);
        unset($this->object->buttonArray);
        $this->assertFalse(isset($this->object->buttonArray));
    }
}
