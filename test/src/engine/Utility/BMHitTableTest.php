<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-29 at 13:10:57.
 */
class BMHitTableTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BMHitTable
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $die1 = BMDie::create(6);
        $die1->value = 2;
        $die2 = BMDie::create(10);
        $die2->value = 8;
        $die3 = BMDie::create(16);
        $die3->value = 1;
        $die4 = BMDie::create(20);
        $die4->value = 18;

        $this->object = new BMHitTable(array($die1, $die2, $die3, $die4));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMHitTable::__construct
     * @todo   Implement testList_hits().
     */
    public function test__construct()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
    /**
     * @covers BMHitTable::find_hit
     */
    public function testFind_hit()
    {
        // 2, 8, 1, 18 can combine to make:
        $hits = array(1, 2, 3, 8, 9, 10, 11, 18, 19, 20, 21, 26, 27, 28, 29);

        for ($i = -64; $i < 64; $i++) {
            if (in_array($i, $hits)) {
                $this->assertTrue(TRUE == $this->object->find_hit($i));
                $ret = $this->object->find_hit($i);
                $this->assertEquals(1, count($ret));
            } else {
                $this->assertFalse(TRUE == $this->object->find_hit($i));
            }
        }

        foreach (array(1, 2, 8, 18) as $i) {
            $ret = $this->object->find_hit($i);
            $this->assertEquals(1, count($ret[0]));
            $sum = 0;
            foreach ($ret[0] as $die) {
                $sum += $die->value;
            }
            $this->assertEquals($i, $sum);
        }

        foreach (array(3, 9, 10, 19, 20, 26) as $i) {
            $ret = $this->object->find_hit($i);
            $this->assertEquals(2, count($ret[0]));
        }

        foreach (array(11, 21, 27, 28) as $i) {
            $ret = $this->object->find_hit($i);
            $this->assertEquals(3, count($ret[0]));
        }

        foreach (array(29) as $i) {
            $ret = $this->object->find_hit($i);
            $this->assertEquals(4, count($ret[0]));
        }
    }

    /**
     * @covers BMHitTable::list_hits
     */
    public function testList_hits()
    {
        // 2, 8, 1, 18 can combine to make:
        $hits = array(1, 2, 3, 8, 9, 10, 11, 18, 19, 20, 21, 26, 27, 28, 29);

        for ($i = -64; $i < 64; $i++) {
            if (in_array($i, $hits)) {
                $this->assertContains($i, $this->object->list_hits());
            } else {
                $this->assertNotContains($i, $this->object->list_hits());
            }
        }
    }
}
