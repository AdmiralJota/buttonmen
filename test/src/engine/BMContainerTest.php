<?php

require_once "engine/BMContainer.php";
require_once "testdummies.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-21 at 15:05:15.
 */
class BMContainerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BMContainer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BMContainer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMContainer::activate
     * @todo   Implement testActivate().
     */
    public function testActivate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMContainer::add_thing
     */
    public function testAdd_thing()
    {
        $die1 = new BMDie;
        $die2 = new BMDie;
        $cont = new BMContainer;
        $die3 = new BMDieTesting;
        $cont2 = new BMContTesting;
        
        // Adding non-die or containers should fail
        $this->assertEmpty($this->object->contents);
        $this->assertNull($this->object->add_thing("thing!"));
        $this->assertEmpty($this->object->contents);

        $this->assertEmpty($this->object->contents);
        $this->assertNull($this->object->add_thing($this));
        $this->assertEmpty($this->object->contents);

        // add dice
        $this->assertNotNull($this->object->add_thing($die1));
        $this->assertNotEmpty($this->object->contents);
        $this->assertEquals(count($this->object->contents), 1);
        $this->assertContains($die1, $this->object->contents);

        // test return value; should return the added object
        $this->assertTrue($die2 === $this->object->add_thing($die2));
        $this->assertNotEmpty($this->object->contents);
        $this->assertEquals(count($this->object->contents), 2);
        $this->assertContains($die1, $this->object->contents);
        $this->assertContains($die2, $this->object->contents);

        // test adding duplicates; should work
        $this->assertTrue($die1 === $this->object->add_thing($die1));
        $this->assertNotEmpty($this->object->contents);
        $this->assertEquals(count($this->object->contents), 3);
        $this->assertContains($die1, $this->object->contents);
        $this->assertContains($die2, $this->object->contents);

        // ordering correct?
        $this->assertTrue($die1 === $this->object->contents[0]);
        $this->assertTrue($die2 === $this->object->contents[1]);
        $this->assertTrue($die1 === $this->object->contents[2]);

        // add a container
        $this->assertTrue($cont === $this->object->add_thing($cont));
        $this->assertNotEmpty($this->object->contents);
        $this->assertEquals(count($this->object->contents), 4);
        $this->assertContains($cont, $this->object->contents);

        // add subclasses
        $this->assertTrue($die3 === $this->object->add_thing($die3));
        $this->assertTrue($cont2 === $this->object->add_thing($cont2));

    }

    /**
     * @covers BMContainer::add_skill
     * @todo   Implement testAdd_skill().
     */
    public function testAdd_skill()
    {
        // Check that the skill list is indeed empty
        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");

        $this->assertEmpty($sl, "Skill list not initially empty.");

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 1, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertEquals($sl["Testing"], "BMSkillTesting", "Incorrect stored classname for 'Testing'");

        // Another skill

        $this->object->add_skill("Testing2");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");
        $this->assertEquals($sl["Testing2"], "BMSkillTesting2", "Incorrect stored classname for 'Testing2'");
        

        // Redundancy

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");

    }

    /**
     * @covers BMContainer::has_skill
     * @depends testAdd_skill
     */
    public function testHas_skill() {
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
        $this->assertFalse($this->object->has_skill("Testing3"));
    }

    /**
     * @covers BMContainer::remove_skill
     * @depends testAdd_skill
     * @depends testHas_skill
     */
    public function testRemove_skill()
    {
        // simple
        $this->object->add_skill("Testing");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));

        // multiple skills
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));

        // fail to remove non-existent skills
        $this->object->add_skill("Testing");
        $this->assertFalse($this->object->remove_skill("Testing3"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
    }

    /**
     * @covers BMContainer::create_from_list
     * @requires testAdd_skill
     * @requires testAdd_thing
     */
    public function testCreate_from_list()
    {
        $cont = NULL;

        // flat test
        $cont = BMContainer::create_from_list(array(new BMDie));
        $this->assertNotNull($cont);
        $this->assertInstanceOf('BMContainer', $cont);
        $this->assertNotEmpty($cont->contents);
        $this->assertEquals(1, count($cont->contents));
        $this->assertInstanceOf('BMDie', $cont->contents[0]);

        $cont = NULL;

        $cont = BMContainer::create_from_list(array(new BMDie, new BMContainer, new BMDieTesting));
        $this->assertNotNull($cont);
        $this->assertInstanceOf('BMContainer', $cont);
        $this->assertNotEmpty($cont->contents);
        $this->assertEquals(3, count($cont->contents));
        $this->assertInstanceOf('BMDie', $cont->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont->contents[1]);
        $this->assertInstanceOf('BMDieTesting', $cont->contents[2]);

        // Preservation of sub-container contents
        $cont2 = BMContainer::create_from_list(array(new BMContainer, new BMDie, $cont));
        $this->assertEquals(3, count($cont2->contents));
        $this->assertInstanceOf('BMContainer', $cont2->contents[0]);
        $this->assertInstanceOf('BMDie', $cont2->contents[1]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[2]);
        $this->assertEquals(3, count($cont2->contents[2]->contents));
        $this->assertInstanceOf('BMDie', $cont2->contents[2]->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[2]->contents[1]);
        $this->assertInstanceOf('BMDieTesting', $cont2->contents[2]->contents[2]);

        // Create new sub-containers from arrays
        $cont2 = BMContainer::create_from_list(array(new BMDie, array(new BMDie, new BMDieTesting)));
        $this->assertEquals(2, count($cont2->contents));
        $this->assertEquals(2, count($cont2->contents[1]->contents));
        $this->assertInstanceOf('BMDie', $cont2->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[1]);
        $this->assertInstanceOf('BMDie', $cont2->contents[1]->contents[0]);
        $this->assertInstanceOf('BMDieTesting', $cont2->contents[1]->contents[1]);

        $cont2 = BMContainer::create_from_list(array(new BMDie, array(new BMDie, array(new BMDieTesting, new BMContainer))));
        $this->assertEquals(2, count($cont2->contents));
        $this->assertEquals(2, count($cont2->contents[1]->contents));
        $this->assertEquals(2, count($cont2->contents[1]->contents[1]->contents));
        $this->assertInstanceOf('BMDie', $cont2->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[1]);
        $this->assertInstanceOf('BMDie', $cont2->contents[1]->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[1]->contents[1]);
        $this->assertInstanceOf('BMDieTesting', $cont2->contents[1]->contents[1]->contents[0]);
        $this->assertInstanceOf('BMContainer', $cont2->contents[1]->contents[1]->contents[1]);


        // skills
        $cont = BMContainer::create_from_list(array(new BMDie), array("Testing"));
        $this->assertTrue($cont->has_skill("Testing"));
        $this->assertFalse($cont->has_skill("Testing2"));

        $cont = BMContainer::create_from_list(array(new BMDie), array("Testing2"));
        $this->assertTrue($cont->has_skill("Testing2"));
        $this->assertFalse($cont->has_skill("Testing"));

        $cont = BMContainer::create_from_list(array(new BMDie), array("Testing2", "Testing"));
        $this->assertTrue($cont->has_skill("Testing"));
        $this->assertTrue($cont->has_skill("Testing2"));

        // Basic error modes -- rewrite to test with try/catch
        $fail = FALSE;

        try {
            $cont = NULL;

            $cont = BMContainer::create_from_list(array("thing"));
            $this->assertNull($cont);
        }
        catch (UnexpectedValueException $e) {
            $fail = TRUE;
        }
        $this->assertTrue($fail, "Bad contents didn't throw an exception.");

        $fail = FALSE;

        try {
            $cont = BMContainer::create_from_list(array(array("thing")));
            $this->assertNull($cont);
        }
        catch (UnexpectedValueException $e) {
            $fail = TRUE;
        }
        $this->assertTrue($fail, "Bad contents didn't throw an exception.");

        // more complex error
        $fail = FALSE;

        try {
            $cont2 = NULL;
            $cont2 = BMContainer::create_from_list(array(new BMDie, array(new BMDieTesting, array(new BMContainer, "thing")), new BMContainer, new BMDie));
            $this->assertNull($cont2);
        }
        catch (UnexpectedValueException $e) {
            $fail = TRUE;
        }
        $this->assertTrue($fail, "Bad contents didn't throw an exception.");

    }

    /**
     * @covers BMContainer::__clone
     * @requires testCreate_from_list
     */
    public function test__clone()
    {
        $list = array(new BMDie, new BMDie, new BMContainer);

        $c1 = BMContainer::create_from_list($list);

        $c2 = clone $c1;

        $this->assertFalse($c1 === $c2, "Basic clone failed");

        foreach ($c1->contents as $i => $thing) {
            $this->assertFalse($thing === $c2->contents[$i], "Sub-clone failed");
        }
    }
}
