<?php

require_once "engine/BMContainer.php";
require_once "testdummies.php";

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-21 at 15:05:15.
 */
class BMContainerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BMContainer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BMContainer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers BMContainer::activate
     * @todo   Implement testActivate().
     */
    public function testActivate()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMContainer::add_thing
     * @todo   Implement testAdd_thing().
     */
    public function testAdd_thing()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMContainer::add_skill
     * @todo   Implement testAdd_skill().
     */
    public function testAdd_skill()
    {
        // Check that the skill list is indeed empty
        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");

        $this->assertEmpty($sl, "Skill list not initially empty.");

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 1, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertEquals($sl["Testing"], "BMSkillTesting", "Incorrect stored classname for 'Testing'");

        // Another skill

        $this->object->add_skill("Testing2");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertNotEmpty($sl, "Skill list should not be empty.");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");
        $this->assertEquals($sl["Testing2"], "BMSkillTesting2", "Incorrect stored classname for 'Testing2'");
        

        // Redundancy

        $this->object->add_skill("Testing");

        $sl = PHPUnit_Framework_Assert::readAttribute($this->object, "skillList");
        $this->assertEquals(count($sl), 2, "Skill list contains more than it should.");
        $this->assertArrayHasKey('Testing', $sl, "Skill list doesn't contain 'Testing'");
        $this->assertArrayHasKey('Testing2', $sl, "Skill list doesn't contain 'Testing2'");

    }

    /**
     * @covers BMContainer::has_skill
     * @depends testAdd_skill
     */
    public function testHas_skill() {
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
        $this->assertFalse($this->object->has_skill("Testing3"));
    }

    /**
     * @covers BMContainer::remove_skill
     * @depends testAdd_skill
     * @depends testHas_skill
     */
    public function testRemove_skill()
    {
        // simple
        $this->object->add_skill("Testing");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));

        // multiple skills
        $this->object->add_skill("Testing");
        $this->object->add_skill("Testing2");
        $this->assertTrue($this->object->remove_skill("Testing"));
        $this->assertFalse($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));

        // fail to remove non-existent skills
        $this->object->add_skill("Testing");
        $this->assertFalse($this->object->remove_skill("Testing3"));
        $this->assertTrue($this->object->has_skill("Testing"));
        $this->assertTrue($this->object->has_skill("Testing2"));
    }

    /**
     * @covers BMContainer::create_from_list
     * @todo   Implement testCreate_from_list().
     */
    public function testCreate_from_list()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers BMContainer::__clone
     * @todo   Implement test__clone().
     */
    public function test__clone()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
